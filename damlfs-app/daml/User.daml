-- Copyright (c) 2022 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module User where

import FileSystem

-- MAIN_TEMPLATE_BEGIN
template User with
    username: Party
    following: [Party]
  where
    signatory username
    observer following
-- MAIN_TEMPLATE_END

    key username: Party
    maintainer key

    -- FOLLOW_BEGIN
    nonconsuming choice Follow: ContractId User with
        userToFollow: Party
      controller username
      do
        assertMsg "You cannot follow yourself" (userToFollow /= username)
        assertMsg "You cannot follow the same user twice" (notElem userToFollow following)
        archive self
        create this with following = userToFollow :: following
    -- FOLLOW_END

-- ALIAS_BEGIN
template Alias with
    username: Party
    alias: Text
    public: Party
  where
    signatory username
    observer public

    key (username, public) : (Party, Party)
    maintainer key._1

    nonconsuming choice Change: ContractId Alias with
        newAlias: Text
      controller username
      do
        archive self
        create this with alias = newAlias
-- ALIAS_END

template ShareRequest with
    sender: Party
    receiver: Party
    content: [(DirectoryId, Either DirectoryId FileId)] -- list of unfolded map contents requested to be shared 
  where
    signatory sender, receiver

    nonconsuming choice SendRequest: ContractId ShareRequest with
        sender: Party
        content: [(DirectoryId, Either DirectoryId FileId)]
      controller sender
      do
        assertMsg "Designated user must follow you back to send a share request" (elem sender following)
        create ShareRequest with sender, receiver = username, content

    nonconsuming choice AcceptRequest: ContractId ShareRequest with
      controller receiver
      do
        _ <- exerciseByKey @FileSystem receiver Merge with tuples = content
        archive self