module Filesystem where

import DA.Foldable (mapA_)

type DirectoryId = ContractId Directory
type FileId = ContractId File

template File with
    creator: Party
    owner: Party
    name: Text
    content: Text
    path: DirectoryId
  where
    signatory creator
    observer owner

    nonconsuming choice DeleteFile: () with
      controller owner
      do
        archive self

    choice ChangeFileOwner: FileId with
        newPath: DirectoryId
        newOwner: Party
      controller owner
      do
        create this with path = newPath, owner = newOwner


template Directory with
    creator: Party
    parent: Optional (DirectoryId)
    name: Text
    owner: Party
    directories: [DirectoryId]
    files: [FileId]
  where
    signatory creator
    observer owner

    nonconsuming choice CreateDirectory: DirectoryId with
        dirName: Text
      controller owner
      do
        existing <- mapA fetch directories
        assertMsg "Directory already exists" $ dirName `notElem` (map (\e -> e.name) existing)

        subDir <- create Directory with creator = creator, parent = Some self, owner = owner, name = dirName, directories = [], files = []
        archive self
        create this with directories = directories ++ [subDir]

    nonconsuming choice DeleteDirectory: () with
      controller owner
      do
        mapA_ (`exercise` DeleteDirectory) directories
        mapA_ (`exercise` DeleteFile) files
        archive self

    nonconsuming choice ChangeDirectoryOwner: DirectoryId with
        newParent: Optional (DirectoryId)
        newOwner: Party
      controller owner
      do
        archive self
        new <- create this with owner = newOwner, parent = None
        mapA_ (\d -> exercise d ChangeDirectoryOwner with newParent = Some new, newOwner = owner) directories
        mapA_ (\f -> exercise f ChangeFileOwner with newPath = new, newOwner = owner) files
        return new

    nonconsuming choice CreateFile: FileId with
        fileName: Text
        content: Text
      controller owner
      do
        existing <- mapA fetch files
        assertMsg "File already exists" $ fileName `notElem` (map (\e -> e.name) existing)
        file <- create File with creator = creator, owner = owner, name = fileName, content = content, path = self
        archive self
        create this with files = files ++ [file]
        return file
